# player king

// player's king must be on its first rank
isRightRank := rank == numIf playerHasWhite then Rank1 else Rank8;
return isRightRank;

@@@@@@

#Â computer king

// computer king must be on its fifth's rank
isRightRank := rank == numIf playerHasWhite then Rank4 else Rank5;
return isRightRank;

@@@@@@

# kings mutual constraint

// kings must be close in terms of columns
kingsAreOnNeighboursColumns := abs(playerKingFile - computerKingFile) <= 1;
return kingsAreOnNeighboursColumns;

@@@@@@

# other pieces count

player pawn : 1

@@@@@@

# other pieces global constraint

[player pawn]

isRightRankInCasePlayerHasWhite := (rank >= Rank3) and (rank <= Rank5);
isRightRankInCasePlayerHasBlack := (rank >= Rank4) and (rank <= Rank6);

isRightRank := boolIf playerHasWhite then isRightRankInCasePlayerHasWhite else isRightRankInCasePlayerHasBlack;
isRightFile := file == playerKingFile;

return isRightFile and isRightRank;

@@@@@@

# goal

draw